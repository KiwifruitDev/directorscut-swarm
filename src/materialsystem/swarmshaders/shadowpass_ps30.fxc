
// STATIC:		"ALPHATEST"				"0..1"
// STATIC:		"MULTITEXTURE"			"0..2"

// DYNAMIC:		"SHADOW_MODE"			"0..2"
// DYNAMIC:		"RADIOSITY"				"0..1"

#include "common_ps_fxc.h"
#include "common_deferred_fxc.h"


#if ALPHATEST || RADIOSITY
sampler sAlbedo							: register( s0 );
#if MULTITEXTURE != 0
sampler sAlbedo2						: register( s1 );
#if MULTITEXTURE == 2
sampler sAlbedo3						: register( s2 );
sampler sAlbedo4						: register( s3 );
#endif
#endif
#endif

#if ALPHATEST
const float g_flAlphaRef				: register( c0 );
#endif


struct PS_INPUT
{
	float2 vTexCoord				: TEXCOORD0;

#if SHADOWMAPPING_USE_COLOR
#	if SHADOW_MODE == DEFERRED_SHADOW_MODE_PROJECTED
	float2 flProjZW					: TEXCOORD1;
#	else
	float flDepth					: TEXCOORD1;
#	endif
#endif

#if SHADOW_MODE == DEFERRED_SHADOW_MODE_DPSM
	float flBack					: TEXCOORD2;
#endif

#if RADIOSITY
	float3 vecNormal				: TEXCOORD3;
#endif

#if MULTITEXTURE == 1
	float4 vColor_0					: COLOR0;
#elif MULTITEXTURE == 2
	float3 vAlphaBlend				: TEXCOORD5;
	float4 vColorBlend1				: COLOR0;
	float4 vColorBlend2				: COLOR1;
	float4 vColorBlend3				: TEXCOORD6;
	float3 vColorBlend4				: TEXCOORD7;
#endif
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
#if RADIOSITY
	float4 vColor_1				:	COLOR1;
	float4 vColor_2				:	COLOR2;
#endif
};

PS_OUTPUT main( const PS_INPUT In )
{
#if SHADOW_MODE == DEFERRED_SHADOW_MODE_DPSM
	clip( In.flBack );
#endif

#if DEFCFG_BILATERAL_DEPTH_TEST
	clip( ShadowColor_Raw( sCameraDepth, In.vCameraDepthTexPos.xyz ) == 0  ); 
#endif

	PS_OUTPUT Out;

#if RADIOSITY
	float4 albedo = tex2D( sAlbedo, In.vTexCoord );

#if MULTITEXTURE == 1
	float4 albedo2 = tex2D( sAlbedo2, In.vTexCoord );
	float flBlendfactor = In.vColor_0.w;
	albedo = lerp( albedo, albedo2, flBlendfactor );
#elif MULTITEXTURE == 2
	float remaining = 1;
	float4 flBlendFactors;
	flBlendFactors.x = GetMultiBlend( In.vColorBlend1.a, remaining );
	flBlendFactors.y = GetMultiBlend( In.vColorBlend2.a, remaining );
	flBlendFactors.z = GetMultiBlend( In.vColorBlend3.a, remaining );
	flBlendFactors.w = remaining;

	albedo = albedo * flBlendFactors.x
		+ tex2D( sAlbedo2, In.vTexCoord ) * flBlendFactors.y
		+ tex2D( sAlbedo3, In.vTexCoord ) * flBlendFactors.z
		+ tex2D( sAlbedo4, In.vTexCoord ) * flBlendFactors.w;
#endif

	Out.vColor_1 = albedo;
	Out.vColor_2 = float4( In.vecNormal * 0.5f + 0.5f, 0 );
#endif

#if ALPHATEST
#if RADIOSITY
	float alpha = albedo.a;
#else
	float alpha = tex2D( sAlbedo, In.vTexCoord ).a;
#endif
	clip( alpha - g_flAlphaRef );
#endif

#if SHADOWMAPPING_USE_COLOR
#	if SHADOW_MODE == DEFERRED_SHADOW_MODE_PROJECTED
	float depth = In.flProjZW.x / In.flProjZW.y;
	Out.vColor_0 = float4( depth.xxx, 1 );
#	else
	Out.vColor_0 = float4( In.flDepth.xxx, 1 );
#	endif
#else
	Out.vColor_0 = float4( 1, 1, 1, 1 );
#endif
	return Out;
}