// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_SWARM_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );
sampler _Sampler_02		: register( s2 );

// Constants
const float2 _g_TexelSize		: register( c16 );
const float3 g_cData_main_view_row_0		: register( c17 ); 		// Callback
const float3 g_cData_main_view_row_1		: register( c18 ); 		// Callback
const float3 g_cData_main_view_row_2		: register( c19 ); 		// Callback

// User code - globals
//-----------------------------------------------------------------------------
// Global variables
//-----------------------------------------------------------------------------

#define USE_STATIC_DIRECTIONS 1

#if USE_STATIC_DIRECTIONS
static float g_fSampleRad = 4;
static float g_fJitter = 10;
#else
static float g_fSampleRad = 8;
static float g_fJitter = 0.5;
#endif
static float g_fIntensity = 0.5;
static float g_fScale = 48.0;
static float g_fFarClip = 8000.0;
static float2 vRenderTargetDimension = 1.0f / _g_TexelSize;

//hlsl_calc_angles 9 36 0
//hlsl_calc_angles 9 60 0 -0.5 5

static const float2 directions_9[9] =
{
	float2( 1.000000, 0.000000 ),
	float2( 0.500000, 0.866025 ),
	float2( -0.500000, 0.866025 ),
	float2( -1.000000, -0.000000 ),
	float2( -0.500000, -0.866025 ),
	float2( 0.500000, -0.866025 ),
	float2( 0.500000, 0.000000 ),
	float2( 0.250000, 0.433013 ),
	float2( -0.250000, 0.433013 ),
};

static const float2 directions_18[18] =
{
	float2( 1.000000, 0.000000 ),
	float2( -1.083289, 0.191013 ),
	float2( 1.127631, -0.410424 ),
	float2( -1.125833, 0.650000 ),
	float2( 1.072462, -0.899903 ),
	float2( -0.964181, 1.149067 ),
	float2( 0.800000, -1.385641 ),
	float2( -0.581435, 1.597477 ),
	float2( 0.312565, -1.772654 ),
	float2( 0.000001, 1.900000 ),
	float2( -0.347297, -1.969616 ),
	float2( 0.718242, 1.973355 ),
	float2( -1.099999, -1.905257 ),
	float2( 1.478410, 1.761904 ),
	float2( -1.838505, -1.542692 ),
	float2( 2.165066, 1.249995 ),
	float2( -2.443202, -0.889248 ),
	float2( 2.658981, 0.468846 ),
};



//-----------------------------------------------------------------------------
// Functions
//----------------------------------------------------------------------

float getDepth(float2 uv)
{
	// _Sampler_00 is our depth buffer, make sure it's the FIRST sampler input on our custom code node! 
	return tex2D(_Sampler_00, uv).r / g_fFarClip;
}

float2 coordsToDeviceSpace( float2 texCoords )
{
	return texCoords * 2.0f - 1.0f;
}

float3 getPosition(float2 uv)
{
	// Get depth data from the depth buffer.
	// We will use this information to re-construct
	// pixel position in view-space
	float depth = getDepth(uv);
	float3 pos = float3(coordsToDeviceSpace( uv ), 1.0);
	return pos * depth;
}

float3 getNormal(float2 uv, in float3x3 viewMatrix, in sampler normalSampler)
{
	//find 2 more points, enough to specify a plane
	float3 worldNormal = tex2D( normalSampler, uv );
	worldNormal = worldNormal * 2.0f - 1.0f;
	return normalize( mul( worldNormal, viewMatrix ) ) * float3( 1, -1, -1 );
}

float2 getRandom(sampler randomSampler, float2 uv)
{
	return tex2D(randomSampler, vRenderTargetDimension * uv / 128.0f * 3.0f).rg * 2.0f - 1.0f;
}

float calAmbientOcclusion(in float2 tcoord, in float2 uv, in float3 p, in float3 cnorm, in float3x3 viewMatrix, in sampler normalSampler)
{
  float3 diff = getPosition(tcoord + uv) - p;
  float3 n = getNormal(tcoord + uv, viewMatrix, normalSampler);
  float3 v = normalize(diff);
  float  d = length(diff)*0.1;

  return
    (1.0-saturate(dot(n, -v)-0.2)) *saturate(dot(cnorm, v)-0.2) * (1.0f - 1.0f / sqrt(0.2f / (d * d * pow(g_fScale, 4)) + 1.0f));
}

// User code - function bodies
void SSAO_PS( in float2 texCoords, in sampler depthSampler, in sampler randomSampler, in sampler normalSampler, in float2 fbTexelSize, in float3x3 viewMatrix, out float ao_out )
{
	float d = tex2D(depthSampler, texCoords).r;
	clip( 3000.0f - d );

	float flIntensity = g_fIntensity * ( 1 + d / 500.0f );
	float3 p = float3( coordsToDeviceSpace( texCoords ), 1.0f ) * d / g_fFarClip;

#if USE_STATIC_DIRECTIONS
	//d = saturate( 1 - d * 0.00015f );
	//d = 3 - d * 0.005f;
	float flJitterAmt = g_fJitter * smoothstep( 1500, 0, d );
	d = 3 - d * 0.001f;
	d = max( 1.0f, d );
#else
	d = 6.5 + d * 0.002f;
#endif

	float3 n = getNormal(texCoords, viewMatrix, normalSampler);
	float2 r = getRandom(randomSampler, texCoords);

	float ao = 0.0f;

#if USE_STATIC_DIRECTIONS == 0
	float incx = g_fSampleRad * fbTexelSize.x;
	float incy = g_fSampleRad * fbTexelSize.y;
	float dx0 = incx;
	float dy0 = incy;
	float ang = 0.0f;
	float iterations = 9.0;

	for( int j = 0; j < iterations; j++ )
	{
		float dzx = (dx0 + r.x * g_fJitter) / d;
		float dzy = (dy0 + r.y * g_fJitter) / d;
		float a = radians(ang);
		float dx = cos(a)*dzx - sin(a)*dzy;
		float dy = sin(a)*dzx + cos(a)*dzy;

		ao += calAmbientOcclusion(texCoords, float2(dx, dy), p, n, viewMatrix, normalSampler);

		dx0 += incx;
		dy0 += incy;
		ang += 360.0 / 7;
	}
#else
	r *= flJitterAmt * fbTexelSize;

	for( int i = 0; i < 9; i++ )
	{
		float2 offset = directions_9[ i ] * fbTexelSize * g_fSampleRad * d + r;

		ao += calAmbientOcclusion(texCoords, offset, p, n, viewMatrix, normalSampler);
	}
#endif

	ao_out = saturate(1.0 - ao * flIntensity);
}

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float3x3 _var0 = { g_cData_main_view_row_0,
				g_cData_main_view_row_1,
				g_cData_main_view_row_2 };
	float _var1 = (float)0;
	SSAO_PS( In.vTexCoord_0, _Sampler_00, _Sampler_01, _Sampler_02, _g_TexelSize, _var0, _var1 );
	float4 _var2 = float4( _var1.x, _var1.x, _var1.x, 1.000000 );
	Out.vColor_0 = _var2;
	return Out;
}