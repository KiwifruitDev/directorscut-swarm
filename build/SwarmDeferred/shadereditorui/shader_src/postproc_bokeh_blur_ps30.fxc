// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_SWARM_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );

// Constants
const float2 _g_TexelSize		: register( c16 );

// User code - globals
#define M 60
#define	EDGEWEIGHTING

static const float3 taps[M] =
{
	float3(  0.2165,  0.1250, 1.0000 ),
	float3(  0.0000,  0.2500, 1.0000 ),
	float3( -0.2165,  0.1250, 1.0000 ),
	float3( -0.2165, -0.1250, 1.0000 ),
	float3( -0.0000, -0.2500, 1.0000 ),
	float3(  0.2165, -0.1250, 1.0000 ),
	float3(  0.4330,  0.2500, 1.0000 ),
	float3(  0.0000,  0.5000, 1.0000 ),
	float3( -0.4330,  0.2500, 1.0000 ),
	float3( -0.4330, -0.2500, 1.0000 ),
	float3( -0.0000, -0.5000, 1.0000 ),
	float3(  0.4330, -0.2500, 1.0000 ),
	float3(  0.6495,  0.3750, 1.0000 ),
	float3(  0.0000,  0.7500, 1.0000 ),
	float3( -0.6495,  0.3750, 1.0000 ),
	float3( -0.6495, -0.3750, 1.0000 ),
	float3( -0.0000, -0.7500, 1.0000 ),
	float3(  0.6495, -0.3750, 1.0000 ),
	float3(  0.8660,  0.5000, 1.0000 ),
	float3(  0.0000,  1.0000, 1.0000 ),
	float3( -0.8660,  0.5000, 1.0000 ),
	float3( -0.8660, -0.5000, 1.0000 ),
	float3( -0.0000, -1.0000, 1.0000 ),
	float3(  0.8660, -0.5000, 1.0000 ),
	float3(  0.2163,  0.3754, 0.8670 ),
	float3( -0.2170,  0.3750, 0.8670 ),
	float3( -0.4333, -0.0004, 0.8670 ),
	float3( -0.2163, -0.3754, 0.8670 ),
	float3(  0.2170, -0.3750, 0.8670 ),
	float3(  0.4333,  0.0004, 0.8670 ),
	float3(  0.4328,  0.5004, 0.8847 ),
	float3( -0.2170,  0.6250, 0.8847 ),
	float3( -0.6498,  0.1246, 0.8847 ),
	float3( -0.4328, -0.5004, 0.8847 ),
	float3(  0.2170, -0.6250, 0.8847 ),
	float3(  0.6498, -0.1246, 0.8847 ),
	float3(  0.6493,  0.6254, 0.9065 ),
	float3( -0.2170,  0.8750, 0.9065 ),
	float3( -0.8663,  0.2496, 0.9065 ),
	float3( -0.6493, -0.6254, 0.9065 ),
	float3(  0.2170, -0.8750, 0.9065 ),
	float3(  0.8663, -0.2496, 0.9065 ),
	float3(  0.2160,  0.6259, 0.8851 ),
	float3( -0.4340,  0.5000, 0.8851 ),
	float3( -0.6500, -0.1259, 0.8851 ),
	float3( -0.2160, -0.6259, 0.8851 ),
	float3(  0.4340, -0.5000, 0.8851 ),
	float3(  0.6500,  0.1259, 0.8851 ),
	float3(  0.4325,  0.7509, 0.8670 ),
	float3( -0.4340,  0.7500, 0.8670 ),
	float3( -0.8665, -0.0009, 0.8670 ),
	float3( -0.4325, -0.7509, 0.8670 ),
	float3(  0.4340, -0.7500, 0.8670 ),
	float3(  0.8665,  0.0009, 0.8670 ),
	float3(  0.2158,  0.8763, 0.9070 ),
	float3( -0.6510,  0.6250, 0.9070 ),
	float3( -0.8668, -0.2513, 0.9070 ),
	float3( -0.2158, -0.8763, 0.9070 ),
	float3(  0.6510, -0.6250, 0.9070 ),
	float3(  0.8668,  0.2513, 0.9070 )
};

// User code - function bodies
void SmartBlur( in float2 tex, in sampler PassSamplerL, in float fr, in float fpa, in float fp, in float R, in float2 rcpres, in sampler bokeh, out float4 color_out )
{
	float4 color = tex2D(PassSamplerL, tex);
	float blend = tex2D(bokeh, tex).r;
	color.a = blend;
	float c = 2 * R * (color.a - 0.5);
 
	float weight = (1 / (c * c + 1)) * dot(color.rgb + 0.01, float3(0.2126, 0.7152, 0.0722));
	weight = max(0, weight);
#ifdef	EDGEWEIGHTING
	weight *= 0.25;
#endif
 
	color *= weight;
	float amount = weight;
 
	for (int i = 0; i < M; i++) {
		float3 dir = taps[i];
 
		float2 s_tex = tex + rcpres * dir.xy * c;
		float4 s_color = tex2D(PassSamplerL, s_tex);
		s_color.a = tex2D(bokeh, s_tex).r;
		float s_c = abs(( s_color.a - 0.5) * 2 * R);
 
		if (c < 0)
			s_c = max(abs(c),s_c);
 
		weight = (1 / (s_c * s_c + 1)) * dot(s_color.rgb + 0.01, float3(0.2126, 0.7152, 0.0722));
		weight *= saturate(1 - smoothstep(s_c * dir.z, s_c * dir.z * 1.1, length(dir.xy) * abs(c)));
 
#ifdef	EDGEWEIGHTING
		weight *= saturate(0.25 + 0.75 * pow(length(dir.xy) * c / (s_c * dir.z), 2));
#endif
 
		color  += s_color * max(0, weight);
		amount +=           max(0, weight);
	}
 
#ifdef SMOOTHBLUR 
	color_out = float4(color.rgb / amount, c / (2 * R) + 0.5);
#endif

	color.rgb /= amount;
	color.a = blend;

	color_out = color;
}

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float4 _var0 = (float4)0;
	SmartBlur( In.vTexCoord_0, _Sampler_00, float( 60.000000 ), float( 10.000000 ), float( 60.000000 ), float( 7.000000 ), _g_TexelSize, _Sampler_01, _var0 );
	Out.vColor_0 = _var0;
	return Out;
}