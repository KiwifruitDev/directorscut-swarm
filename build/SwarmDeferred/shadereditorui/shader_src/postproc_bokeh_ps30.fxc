// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_SWARM_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );

// User code - globals
#define M 60
//#define WEAPONBLUR

// User code - function bodies
void BokehDof( in sampler gdepth, in float2 tex, in float base_blur_radius, in float R, in float fp, in float fpa, in float fr, in float drangeZ, in float weaponblur_cutoff, out float4 color )
{
	static float k = 0.00001;
	float depth = tex2D(gdepth,tex).a;
	float focus = tex2D(gdepth,float2(0.5,0.5)).a;
	float s = focus * drangeZ;
	float z = depth * drangeZ;
	float weapon = 1;
 
	float fpf = clamp(1 / s + fr, fp, fp + fpa);
	float c = base_blur_radius * 0.009 * (fr - fpf + 1 / z) / fr / k;
	c = sign(z - s) * min(abs(c), R) / (2 * R);
 
#ifndef	WEAPONBLUR
	weapon = smoothstep(weaponblur_cutoff - 0.05, weaponblur_cutoff, z);
	c *= weapon;
#endif
 
	color = float4(c + 0.5, 0, 0, 0);
}

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float _var0 = float( 4096.000000 ) * float( 0.005000 );
	float4 _var1 = (float4)0;
	BokehDof( _Sampler_00, In.vTexCoord_0, float( 10.000000 ), float( 10.000000 ), float( 60.000000 ), float( 10.000000 ), float( 60.000000 ), _var0, float( 0.800000 ), _var1 );
	Out.vColor_0 = _var1;
	return Out;
}