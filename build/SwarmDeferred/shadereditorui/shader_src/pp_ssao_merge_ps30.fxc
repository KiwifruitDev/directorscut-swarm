// ********************************
// ** auto generated pixelshader **
// ********************************

#define SHADER_EDITOR_SWARM_COMPILE


// Includes
#include "common_ps_fxc.h"
#include "common_vertexlitgeneric_dx9.h"
#include "common_lightmappedgeneric_fxc.h"
#include "common_flashlight_fxc.h"
#include "common_parallax.h"


// Samplers
sampler _Sampler_00		: register( s0 );
sampler _Sampler_01		: register( s1 );

// Constants
const float2 _g_TexelSize		: register( c16 );

// Arrays
static const float2 g_cArray_129[4] =
{
	float2( -0.500000f, -0.500000f ),
	float2( 1.000000f, -0.500000f ),
	float2( -0.500000f, 1.000000f ),
	float2( 1.000000f, 1.000000f ),
};
static const float g_cArray_133[4] =
{
	float( 0.444444f ),
	float( 0.222222f ),
	float( 0.222222f ),
	float( 0.111111f ),
};

// Semantic structures
struct PS_INPUT
{
	float2 vTexCoord_0			:	TEXCOORD0;
};

struct PS_OUTPUT
{
	float4 vColor_0				:	COLOR0;
};

// Entry point
PS_OUTPUT main( const PS_INPUT In )
{
	PS_OUTPUT Out;
	float4 _var0 = tex2D( _Sampler_00, In.vTexCoord_0 ).rgba;
	float _var1 = float( 0.000000 );
	for ( int _var2 = 0; _var2 < 4; _var2++ )
	{
		float2 _var3 = In.vTexCoord_0;
		float2 _var4 = g_cArray_129[_var2] * _g_TexelSize;
		_var3 = _var3 + _var4;
		float _var5 = tex2D( _Sampler_01, _var3 ).r;
		_var5 = _var5 * g_cArray_133[_var2];
		_var1 = _var1 + _var5;
	}
	_var0 = _var0 * _var1;
	Out.vColor_0 = _var0;
	return Out;
}